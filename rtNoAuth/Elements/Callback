%# {{{ BEGIN BPS TAGGED BLOCK
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2004 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# }}} END BPS TAGGED BLOCK
<%once>
my (%cache, $check);
</%once>
<%init>
# checks for inode change time for each callback directory
my $new_check = join(
    $;, map { $_->[1] => (stat("$_->[1]/Callbacks"))[10] } $m->interp->resolver->comp_root_array
) or return;

$Page = $m->callers(1)->path unless ($Page);

my $callbacks;
if ($new_check eq $check) {
    $callbacks = $cache{$Page,$_CallbackName};
}
else {
    $check = $new_check;
}

if (!$callbacks) {
    my $path = "/Callbacks/*$Page/$_CallbackName";
    $callbacks = [ $m->interp->resolver->glob_path($path) ];
    @$callbacks = grep !/^\.|~$/, @$callbacks; #skip backup files

    #skip files without a package
    my $invalid_base = "/Callbacks/$Page/$_CallbackName";
    @$callbacks = grep !/^$invalid_base$/, @$callbacks;



    $cache{$Page,$_CallbackName} = $callbacks;
}

my @rv;
foreach my $comp (sort @$callbacks) {
        push @rv, $m->comp($comp, %ARGS) if $m->comp_exists($comp);
}
return @rv;
</%init>
<%args>
$_CallbackName => 'Default'
$Page => undef
</%args>
